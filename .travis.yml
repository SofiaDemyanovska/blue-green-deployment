# Define environment
dist: xenial # Ubuntu 16.04
language: bash

# Export variables
env:
  - tf_version=0.13.2 AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID" tf_init_cli_options="-input=false" tf_validation_cli_options="" tf_plan_cli_options="-lock=false -input=false" tf_apply_cli_options="-auto-approve -input=false"

# Only build pushes to master branch
branches:
  only:
    - master

# Install dependencies
before_install:
# Install terraform
  - mkdir test && cd test/
  - wget https://releases.hashicorp.com/terraform/"$tf_version"/terraform_"$tf_version"_linux_amd64.zip
  - sudo unzip terraform_"$tf_version"_linux_amd64.zip 
  - sudo mv terraform /usr/local/bin/
  - rm terraform_"$tf_version"_linux_amd64.zip

# Install Ansible
  - sudo apt update
  - sudo apt install software-properties-common
  - sudo apt-add-repository --yes --update ppa:ansible/ansible
  - sudo apt install ansible

# Create ssh key pair for instance
  - ssh-keygen -t rsa -f ~/.ssh/server -N 'server'

# Terraform Apply and Ansible Playbook
jobs:
  include:
    - stage: Blue-Green Deployment
      # Only run terraform apply stage when changes are commited to master branch
      if: type IN (push) and branch = master
      script:
      # Export AWS credentials from Travis enviroment variables
        - export AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY"
        - export AWS_DEFAULT_REGION="us-east-2"

      # Run terraform apply and add new variables with loadbalancer url
        - cd /$TRAVIS_BUILD_DIR/terraform
        - echo "Executing Terraform Apply on merged code"
        - terraform init $tf_init_cli_options
        - terraform apply $tf_apply_cli_options
        - LB_IP=$(terraform output loadbalancer_url)

      # Run ansible playbook with extra variables
        - cd /$TRAVIS_BUILD_DIR/ansible
        - ansible-playbook main.yaml --extra-vars "aws_access_key=$AWS_ACCESS_KEY_ID aws_secret_key=$AWS_SECRET_ACCESS_KEY lb_url=$LB_IP"
